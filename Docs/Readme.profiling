
--------------------------------------------- Function timings.
To use the profiler, set PROFILE=TRUE in your GNUmakefile.
A summary of timings will be written to cout and a directory
named bl_prof will be created with timings for each processor
in nfiles files.

You must at least instrument main.

To instrument regular functions, add BL_PROFILE("class::fname()") to
the top of your function. there can only be one of these per function.

void YourClass::YourFunction() {
  BL_PROFILE("YourClass::YourFunction()");  // this name can be any string
  // your function code
}


For other timers within an already instrumented function, add:

      BL_PROFILE_VAR("Flaten::FORT_FLATENX()", anyname);  // add this before
        FORT_FLATENX(arg1, arg2);
      BL_PROFILE_VAR_STOP(anyname);   // add this after, using the same name

if you want to use the same name within the same scope, you can use:

      BL_PROFILE_VAR("MyFuncs()", myfuncs);  // the first one
        MyFunc_0(arg);
      BL_PROFILE_VAR_STOP(myfuncs);
      ...
      BL_PROFILE_VAR_START(myfuncs);
        MyFunc_1(arg);
      BL_PROFILE_VAR_STOP(myfuncs);

or create a profiling variable without starting, then start/stop:

      BL_PROFILE_VAR_NS("MyFuncs()", myfuncs);  // dont start the timer
      ...
      BL_PROFILE_VAR_START(myfuncs);
        MyFunc_0(arg);
      BL_PROFILE_VAR_STOP(myfuncs);
      ...
      BL_PROFILE_VAR_START(myfuncs);
        MyFunc_1(arg);
      BL_PROFILE_VAR_STOP(myfuncs);


For main, add these:

int main(...) {

  BoxLib::Initialize(argc,argv);

  BL_PROFILE_VAR("main()", pmain);  // add this

  // code for main

  BL_PROFILE_VAR_STOP(pmain);  // add this
  BL_PROFILE_SET_RUN_TIME(Your_timers_time_for_the_run);  // optional

  BoxLib::Finalize();
}


Profiling macros are empty if profiling is off.


--------------------------------------------- fortran90 f90 interface

fortran90 functions can be profiled, add these functions:

call bl_proffortfuncstart("copyassoc_build")
...
call bl_proffortfuncstop("copyassoc_build")

the start and stop calls must be matched and
the profiling output will warn of any bl_proffortfuncstart
calls that were not stopped with bl_proffortfuncstop
(in debug mode only).  you will need to add bl_proffortfuncstop
before any returns and at the end of the function (or at the
point in the function you want to stop profiling).
for functions with a high number of calls, there is
a lighter weight interface:

call bl_proffortfuncstart_int(n)
...
call bl_proffortfuncstop_int(n)

where 'n' is an integer in the range [1,mFortProfsIntMaxFuncs]
mFortProfsIntMaxFuncs is currently set to 32.  the profiled
function will be named FORTFUNC_n in the profiler output,
unless you rename it with BL_PROFILE_CHANGE_FORT_INT_NAME(fname, int)
where fname is a std::string and the int is the integer 'n'
in the bl_proffortfuncstart_int/bl_proffortfuncstop_int calls.
BL_PROFILE_CHANGE_FORT_INT_NAME should be called in main().




--------------------------------------------- Trace profiling.
Trace profiling keeps track of when each profiled function
is called and the call stack.  The data is written to nfiles
in bl_prof and must be postprocessed with AMRProfParser.
To use trace profiling, set PROFILE=TRUE and TRACE_PROFILE=TRUE
in your GNUmakefile.



--------------------------------------------- Region profiling.
Part of the trace profiling is the ability to set regions
in the code which can be analyzed for profiling information
independently from other regions.  Examples could include
"initialization," "i/o," "TimeStep3," "AdvanceHydro," etc.
The amrprofparser can query the performance database with
filters to include and exclude given regions.  To create
regions, add these to your code:

    BL_PROFILE_REGION_START("ThreeFuncRegion");  // starts the region
    func0();
    func1();  // your code
    func2();
    BL_PROFILE_REGION_STOP("ThreeFuncRegion");  // stops the region



--------------------------------------------- Communications timings.
Timings for communication functions such as ParallelDescriptor::Send(...)
are shown in the regular profiling's function timing section.  BoxLib
can also collect additional information such as point to point
communication timings, amount of data moved, barrier and
reduction wait times, etc.  To use this part of the profiler,
set PROFILE=TRUE and COMM_PROFILE=TRUE in your GNUmakefile.
A database of communication information will be written to
nfiles in bl_prof and must be postprocessed with AMRProfParser.

Some features of the communication profiler:
  local filtering.
  nfiles for data and headers.
  demand driven i/o support.
  named tags.
  named barriers.
  flushing.

nametag instrumentation:

BL_COMM_PROFILE_NAMETAG("LevelAdvance::FillPatchIterator START");
BL_COMM_PROFILE_NAMETAG("LevelAdvance::FillPatchIterator END");

barriers can be named:  ParallelDescriptor::Barrier("CreateDirs");


--------------------------------------------- Demand driven i/o support.
Each header file contains seek position information for
data blocks, barriers, reductions, and named tags and
minmax times for each data block in order to assist
reading subsets of the data.


--------------------------------------------- File formats.
  The communication data exists in the directory named
  bl_prof.  Header files are named bl_comm_prof_H_0000
  through bl_comm_prof_H_nnnn, where nnnn is nfiles-1.
  data files have the same names except 'D' instead of 'H'.
  the data is in binary.  currently there is no support
  for postprocessing on a machine with a different byte
  ordering from where the data was written.

  header files have the following format:

NProcs  4
CommStatsSize  24
CommProfProc  0  nCommStats  2338513  datafile  bl_comm_prof_D_0000  seekpos  0
bNum  0  "Amr::setRecordGridInfo"  4
bNum  1  "Amr::checkPoint::dir"  1489916
bNum  n  "barrier name"  seekpos
bNum  m  "barrier name"  seekpos
nTag  "STEP 1"  2338512
nTag  "tagname aaa"  seekpos
nTag  "tagname bbb"  seekpos
red  0  2574
red  1  2576
red  n  seekpos
timeMinMax  0.002336025238037109  231.200443983078
nameTagNames  "STEP 1"
nameTagNames  "tagname aaa"
nameTagNames  "tagname bbb"
NProcs  4   # <------------------ a new data block
# rest of data block
# more data blocks


Each mpi process writes its own data and data can be
flushed during the run, so there will be multiple
blocks for each process, probably interleaved with
data from other processes.  The amrprofparser will
sort these out.




