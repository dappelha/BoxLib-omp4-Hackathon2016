! This module stores the runtime parameters.  The probin_init() routine is
! used to initialize the runtime parameters

module probin_module

  use bl_types
  use bl_space
  use bl_constants_module
  use bc_module

  implicit none

  private

  @@declarationsA@@

  ! Keep track of the inputs file that was used to read in runtime
  ! parameters.  This filename will be written into the job_info file.
  character (len=128), save, public :: inputs_file_used = ""


  ! These will be allocated and defined below
  logical,    save, public :: pmask(3)
  real(dp_t), save, public :: prob_lo(3)
  real(dp_t), save, public :: prob_hi(3)

end module probin_module


module runtime_init_module

  use bl_types
  use probin_module

  implicit none

  @@namelist@@

  private

  public :: probin

  public :: runtime_init, runtime_close

contains

  subroutine runtime_init()

    use f2kcli
    use parallel
    use bl_IO_module
    use bl_prof_module
    use bl_error_module
    use bl_constants_module
    use knapsack_module
    use cluster_module
    use layout_module
    use bc_module

    integer    :: narg, farg

    character(len=128) :: fname
    character(len=128) :: probin_env

    logical    :: lexist, need_inputs
    integer    :: natonce, myproc, nprocs, nsets, myset, iset, ibuff(1)
    integer    :: wakeuppid, waitforpid, tag, un, ierr
    real(dp_t) :: pistart, piend, pitotal, pistartall, piendall, pitotalall
    real(dp_t) :: pitotal_max, pitotalall_max

    narg = command_argument_count()

    need_inputs = .true.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! initialize the runtime parameters
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    !
    ! Don't have more than 64 processes trying to read from disk at once.
    !
    natonce = min(64,parallel_nprocs())
    myproc  = parallel_myproc()
    nprocs  = parallel_nprocs()
    nsets   = ((nprocs + (natonce - 1)) / natonce)
    myset   = (myproc / natonce)
    pistart = 0.d0
    piend   = 0.d0

    pistartall = parallel_wtime()

    ! loop over the processor groups (sets) and read the inputs file.
    ! We look first for an environment variable "PROBIN", then at the
    ! first argument to the executable, and finally for a file named
    ! inputs_SMC
    do iset = 0, nsets-1

       if (myset .eq. iset) then

          pistart = parallel_wtime()

          call get_environment_variable('PROBIN', probin_env, status = ierr)
          if ( need_inputs .AND. ierr == 0 ) then
             un = unit_new()
             open(unit=un, file = probin_env, status = 'old', action = 'read')
             read(unit=un, nml = probin)
             close(unit=un)
             inputs_file_used = probin_env
             need_inputs = .false.
          end if

          farg = 1
          if ( need_inputs .AND. narg >= 1 ) then
             call get_command_argument(farg, value = fname)
             inquire(file = fname, exist = lexist )
             if ( lexist ) then
                farg = farg + 1
                un = unit_new()
                open(unit=un, file = fname, status = 'old', action = 'read')
                read(unit=un, nml = probin)
                close(unit=un)
                inputs_file_used = fname
                need_inputs = .false.
             end if
          end if

          inquire(file = 'inputs_SMC', exist = lexist)
          if ( need_inputs .AND. lexist ) then
             un = unit_new()
             open(unit=un, file = 'inputs_SMC', status = 'old', action = 'read')
             read(unit=un, nml = probin)
             close(unit=un)
             inputs_file_used = 'inputs_SMC'
             need_inputs = .false.
          end if

          piend = parallel_wtime()

          ibuff(1)  = 0
          wakeuppid = myproc + natonce
          tag       = mod(myproc,natonce)

          if (wakeuppid < nprocs) call parallel_send(ibuff, wakeuppid, tag)

       end if

      if (myset .eq. (iset + 1)) then

         tag        = mod(myproc,natonce)
         waitforpid = myproc - natonce

         call parallel_recv(ibuff, waitforpid, tag)
      endif

    end do

    piendall   = parallel_wtime()
    pitotal    = piend - pistart
    pitotalall = piendall - pistartall

    call parallel_reduce(pitotal_max,    pitotal,    MPI_MAX, &
                         proc = parallel_IOProcessorNode())
    call parallel_reduce(pitotalall_max, pitotalall, MPI_MAX, &
                         proc = parallel_IOProcessorNode())

    ! if (parallel_IOProcessor()) then
    !   print*, "PROBINIT max time   = ", pitotal_max
    !   print*, "PROBINIT total time = ", pitotalall_max
    ! endif

    do while ( farg <= narg )
       call get_command_argument(farg, value = fname)
       select case (fname)


       @@commandline@@


       case ('--')
          farg = farg + 1
          exit

       case default
          if ( parallel_IOProcessor() ) then
             write(*,*) 'UNKNOWN option = ', fname
          end if
          call bl_error("Unknown option")
       end select

       farg = farg + 1
    end do


    !-------------------------------------------------------------------------
    ! some sanity checks and set some defaults
    !-------------------------------------------------------------------------

    ! initialize pmask
    pmask = .true.

    ! initialize prob_lo and prob_hi
    prob_lo(1) = prob_lo_x
    prob_lo(2) = prob_lo_y
    prob_lo(3) = prob_lo_z
    prob_hi(1) = prob_hi_x
    prob_hi(2) = prob_hi_y
    prob_hi(3) = prob_hi_z

    call layout_set_tilesize((/tilesize_x,tilesize_y,tilesize_z/))

  end subroutine runtime_init

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine runtime_close()
    use probin_module
  end subroutine runtime_close

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

end module runtime_init_module
